# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1.5-browsers
        environment:
          - ACCEPT_EULA: Y
          - APP_ENV: CI
          - DB_HOST: sqlsrver
          - DB_PORT: 1433
          - DB_DATABASE: blog
          - DB_USERNAME: SA
          - DB_PASSWORD: L@r@v3lbl0g
      - image: microsoft/mssql-server-linux:2017-latest
        environment:
          - ACCEPT_EULA: Y
          - MSSQL_SA_PASSWORD: L@r@v3lbl0g

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install Microsoft Repository
          command: |
            sudo apt-get update && \
            sudo apt-get install -y apt-transport-https \
            && sudo curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - \
            && sudo curl -o /etc/apt/sources.list.d/mssql-release.list https://packages.microsoft.com/config/debian/8/prod.list \
            && sudo apt-get update

      - run:
          name: 'Install mssql-tools'
          command: |
            sudo apt-get update && \
            sudo ACCEPT_EULA=Y apt-get install -y \
                unixodbc \
                unixodbc-dev \
                mssql-tools \
                libgss3 \
                odbcinst \
                msodbcsql \
                locales

      - run:
          name: Create Database
          command: sqlcmd -H localhost -U SA -P 'L@r@v3lbl0g' -Q 'create database blog'

      - run: ./bin/composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # run tests!
      - run: ./bin/composer exec -v phpunit